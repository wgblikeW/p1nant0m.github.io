<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>CryptoHack - Tag - p1nant0m</title>
        <link>https://p1nant0m.xyz/en/tags/cryptohack/</link>
        <description>CryptoHack - Tag - p1nant0m</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>wgblike@gmail.com (p1nant0m)</managingEditor>
            <webMaster>wgblike@gmail.com (p1nant0m)</webMaster><lastBuildDate>Wed, 20 Oct 2021 12:00:00 &#43;0000</lastBuildDate><atom:link href="https://p1nant0m.xyz/en/tags/cryptohack/" rel="self" type="application/rss+xml" /><item>
    <title>Forbbiden Fruit</title>
    <link>https://p1nant0m.xyz/en/2021-10-20-forbbiden-fruit/</link>
    <pubDate>Wed, 20 Oct 2021 12:00:00 &#43;0000</pubDate>
    <author>P1nant0m</author>
    <guid>https://p1nant0m.xyz/en/2021-10-20-forbbiden-fruit/</guid>
    <description><![CDATA[Origin: http://aes.cryptohack.org/forbidden_fruit/
0x1 DESCRIPTION Galois Counter Mode (GCM) is the most widely used block cipher mode in TLS today. It&rsquo;s an &ldquo;authenticated encryption with associated data&rdquo; cipher mode (AEAD), yet not resistant to misuse.
See here for a great resource on the inner workings of GCM, as well as this attack.
Source
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  from Crypto.Cipher import AES import os IV = ? KEY = ? FLAG = ? @chal.route(&#39;/forbidden_fruit/decrypt/&lt;nonce&gt;/&lt;ciphertext&gt;/&lt;tag&gt;/&lt;associated_data&gt;/&#39;) def decrypt(nonce, ciphertext, tag, associated_data): ciphertext = bytes.fromhex(ciphertext) tag = bytes.fromhex(tag) header = bytes.fromhex(associated_data) nonce = bytes.fromhex(nonce) if header != b&#39;CryptoHack&#39;: return {&#34;error&#34;: &#34;Don&#39;t understand this message type&#34;} cipher = AES.new(KEY, AES.MODE_GCM, nonce=nonce) encrypted = cipher.update(header) try: decrypted = cipher.decrypt_and_verify(ciphertext, tag) except ValueError as e: return {&#34;error&#34;: &#34;Invalid authentication tag&#34;} if b&#39;give me the flag&#39; in decrypted: return {&#34;plaintext&#34;: FLAG.encode().hex()} return {&#34;plaintext&#34;: decrypted.hex()} @chal.route(&#39;/forbidden_fruit/encrypt/&lt;plaintext&gt;/&#39;) def encrypt(plaintext): plaintext = bytes.fromhex(plaintext) header = b&#34;CryptoHack&#34; cipher = AES.new(KEY, AES.MODE_GCM, nonce=IV) encrypted = cipher.]]></description>
</item>
</channel>
</rss>
